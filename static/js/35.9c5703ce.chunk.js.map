{"version":3,"file":"static/js/35.9c5703ce.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/pages/Chat/ChatPage.module.css?8336","components/pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ChatPage_wrapper__r+18A\",\"autor\":\"ChatPage_autor__zc2xo\",\"messageText\":\"ChatPage_messageText__3G+To\",\"userName\":\"ChatPage_userName__iktbu\"};","import { Avatar, Button } from 'antd';\r\nimport TextArea from 'antd/es/input/TextArea';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport classes from './ChatPage.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sendChatMessage, startMessagesListening, stopMessagesListening } from '../../../redux/chat-reduser';\r\nimport { Dispatch } from 'redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { ChatMessageType } from '../../types/ChatType';\r\n\r\nconst ChatPage: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {status === 'error' && <div>Some error occured</div>}\r\n      <ChatMessages />\r\n      <AddChatMessage />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChatMessages: React.FC = () => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: 400, overflowY: 'auto' }} onScroll={scrollHandler}>\r\n      <h3 style={{ textAlign: 'center' }}>Chat</h3>\r\n      <div style={{ marginTop: 20 }}>\r\n        <div>\r\n          {messages.map((m, index) => (\r\n            <Message key={index} message={m} />\r\n          ))}\r\n          <div ref={messagesAnchorRef}> </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(({ message }) => {\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <div className={classes.autor}>\r\n        <Avatar shape=\"square\" size={36} src={<img src={message.photo} alt=\"avatar\" />} />\r\n        <div className={classes.userName}>{message.userName}</div>\r\n      </div>\r\n      <div className={classes.messageText}>{message.message}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport const AddChatMessage: React.FC = () => {\r\n  const [message, setMessage] = useState('');\r\n\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n  const sendChatMessageHandler = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendChatMessage(message));\r\n    setMessage('');\r\n  };\r\n  return (\r\n    <div style={{ marginTop: 20 }}>\r\n      <div>\r\n        <TextArea\r\n          placeholder=\"Enter your message...\"\r\n          autoSize={{ minRows: 2, maxRows: 3 }}\r\n          showCount\r\n          maxLength={300}\r\n          onChange={(e) => setMessage(e.currentTarget.value)}\r\n          value={message}\r\n        />\r\n      </div>\r\n      <Button disabled={status !== 'ready'} type=\"primary\" style={{ marginTop: 15 }} onClick={sendChatMessageHandler}>\r\n        Send message\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"names":["ChatMessages","messages","useSelector","state","chat","messagesAnchorRef","useRef","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","useEffect","_messagesAnchorRef$cu","current","scrollIntoView","behavior","_jsxs","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","children","_jsx","textAlign","marginTop","map","m","index","Message","message","ref","React","_ref","className","classes","Avatar","shape","size","src","photo","alt","userName","AddChatMessage","_useState3","_useState4","setMessage","dispatch","useDispatch","status","TextArea","placeholder","autoSize","minRows","maxRows","showCount","maxLength","onChange","value","Button","disabled","type","onClick","sendChatMessage","startMessagesListening","stopMessagesListening"],"sourceRoot":""}